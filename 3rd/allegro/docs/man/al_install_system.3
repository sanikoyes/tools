.TH "al_install_system" "3" "" "Allegro reference manual" ""
.SH NAME
.PP
al_install_system \- Allegro 5 API
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro.h>

bool\ al_install_system(int\ version,\ int\ (*atexit_ptr)(void\ (*)(void)))
\f[]
.fi
.SH DESCRIPTION
.PP
Initialize the Allegro system.
No other Allegro functions can be called before this (with one or two
exceptions).
.PP
The version field should always be set to ALLEGRO_VERSION_INT.
.PP
If atexit_ptr is non\-NULL, and if hasn\[aq]t been done already,
al_uninstall_system(3) will be registered as an atexit function.
.PP
Returns true if Allegro was successfully initialized by this function
call (or already was initialized previously), false if Allegro cannot be
used.
A common reason for this function to fail is when the version of Allegro
you compiled your game against is not compatible with the version of the
shared libraries that were found on the system.
.PP
The version compatibility check works as follows.
Let A = xa.ya.za.* be the version of Allegro you compiled with, and B =
xb.yb.zb.* be the version of Allegro found in the system shared library.
.PP
If you defined \f[C]ALLEGRO_UNSTABLE\f[] before including Allegro
headers, then version A is compatible with B only if xa.ya.za =
xb.yb.zb.
Otherwise, A is compatible with B only if xa.ya = xb.yb.
.SH SEE ALSO
.PP
al_init(3)
