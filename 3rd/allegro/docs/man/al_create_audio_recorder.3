.TH "al_create_audio_recorder" "3" "" "Allegro reference manual" ""
.SH NAME
.PP
al_create_audio_recorder \- Allegro 5 API
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro_audio.h>

ALLEGRO_AUDIO_RECORDER\ *al_create_audio_recorder(size_t\ fragment_count,
\ \ \ unsigned\ int\ samples,\ unsigned\ int\ frequency,
\ \ \ ALLEGRO_AUDIO_DEPTH\ depth,\ ALLEGRO_CHANNEL_CONF\ chan_conf)
\f[]
.fi
.SH DESCRIPTION
.PP
Creates an audio recorder using the system\[aq]s default recording
device.
(So if the returned device does not work, try updating the system\[aq]s
default recording device.)
.PP
Allegro will internally buffer several seconds of captured audio with
minimal latency.
(XXX: These settings need to be exposed via config or API calls.) Audio
will be copied out of that private buffer into a fragment buffer of the
size specified by the samples parameter.
Whenever a new fragment is ready an event will be generated.
.PP
The total size of the fragment buffer is fragment_count * samples *
bytes_per_sample.
It is treated as a circular, never ending buffer.
If you do not process the information fast enough, it will be overrun.
Because of that, even if you only ever need to process one small
fragment at a time, you should still use a large enough value for
fragment_count to hold a few seconds of audio.
.PP
frequency is the number of samples per second to record.
Common values are:
.IP \[bu] 2
8000 \- telephone quality speech
.IP \[bu] 2
11025
.IP \[bu] 2
22050
.IP \[bu] 2
44100 \- CD quality music (if 16\-bit, stereo)
.PP
For maximum compatibility, use a depth of ALLEGRO_AUDIO_DEPTH_UINT8 or
ALLEGRO_AUDIO_DEPTH_INT16, and a single (mono) channel.
.PP
The recorder will not record until you start it with
al_start_audio_recorder(3).
.PP
On failure, returns NULL.
.SH SINCE
.PP
5.1.1
.RS
.PP
\f[I][Unstable API]:\f[] The API may need a slight redesign.
.RE
